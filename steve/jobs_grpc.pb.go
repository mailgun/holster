// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: jobs.proto

package steve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobsV1Client is the client API for JobsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobsV1Client interface {
	// Reports the health of the service.
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResp, error)
	// Get available jobs.
	GetJobs(ctx context.Context, in *GetJobsReq, opts ...grpc.CallOption) (*GetJobsResp, error)
	// Start task.
	StartTask(ctx context.Context, in *StartTaskReq, opts ...grpc.CallOption) (*StartTaskResp, error)
	// Stop task.
	StopTask(ctx context.Context, in *StopTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get running tasks and status.
	GetRunningTasks(ctx context.Context, in *GetRunningTasksReq, opts ...grpc.CallOption) (*GetRunningTasksResp, error)
	// Get stopped tasks and status.
	GetStoppedTasks(ctx context.Context, in *GetStoppedTasksReq, opts ...grpc.CallOption) (*GetStoppedTasksResp, error)
	// Get task output.
	GetTaskOutput(ctx context.Context, in *GetTaskOutputReq, opts ...grpc.CallOption) (*GetTaskOutputResp, error)
	// Get streaming task output.
	GetStreamingTaskOutput(ctx context.Context, in *GetTaskOutputReq, opts ...grpc.CallOption) (JobsV1_GetStreamingTaskOutputClient, error)
}

type jobsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewJobsV1Client(cc grpc.ClientConnInterface) JobsV1Client {
	return &jobsV1Client{cc}
}

func (c *jobsV1Client) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResp, error) {
	out := new(HealthCheckResp)
	err := c.cc.Invoke(ctx, "/pb.steve.JobsV1/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsV1Client) GetJobs(ctx context.Context, in *GetJobsReq, opts ...grpc.CallOption) (*GetJobsResp, error) {
	out := new(GetJobsResp)
	err := c.cc.Invoke(ctx, "/pb.steve.JobsV1/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsV1Client) StartTask(ctx context.Context, in *StartTaskReq, opts ...grpc.CallOption) (*StartTaskResp, error) {
	out := new(StartTaskResp)
	err := c.cc.Invoke(ctx, "/pb.steve.JobsV1/StartTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsV1Client) StopTask(ctx context.Context, in *StopTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.steve.JobsV1/StopTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsV1Client) GetRunningTasks(ctx context.Context, in *GetRunningTasksReq, opts ...grpc.CallOption) (*GetRunningTasksResp, error) {
	out := new(GetRunningTasksResp)
	err := c.cc.Invoke(ctx, "/pb.steve.JobsV1/GetRunningTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsV1Client) GetStoppedTasks(ctx context.Context, in *GetStoppedTasksReq, opts ...grpc.CallOption) (*GetStoppedTasksResp, error) {
	out := new(GetStoppedTasksResp)
	err := c.cc.Invoke(ctx, "/pb.steve.JobsV1/GetStoppedTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsV1Client) GetTaskOutput(ctx context.Context, in *GetTaskOutputReq, opts ...grpc.CallOption) (*GetTaskOutputResp, error) {
	out := new(GetTaskOutputResp)
	err := c.cc.Invoke(ctx, "/pb.steve.JobsV1/GetTaskOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsV1Client) GetStreamingTaskOutput(ctx context.Context, in *GetTaskOutputReq, opts ...grpc.CallOption) (JobsV1_GetStreamingTaskOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobsV1_ServiceDesc.Streams[0], "/pb.steve.JobsV1/GetStreamingTaskOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsV1GetStreamingTaskOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobsV1_GetStreamingTaskOutputClient interface {
	Recv() (*GetTaskOutputResp, error)
	grpc.ClientStream
}

type jobsV1GetStreamingTaskOutputClient struct {
	grpc.ClientStream
}

func (x *jobsV1GetStreamingTaskOutputClient) Recv() (*GetTaskOutputResp, error) {
	m := new(GetTaskOutputResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobsV1Server is the server API for JobsV1 service.
// All implementations must embed UnimplementedJobsV1Server
// for forward compatibility
type JobsV1Server interface {
	// Reports the health of the service.
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResp, error)
	// Get available jobs.
	GetJobs(context.Context, *GetJobsReq) (*GetJobsResp, error)
	// Start task.
	StartTask(context.Context, *StartTaskReq) (*StartTaskResp, error)
	// Stop task.
	StopTask(context.Context, *StopTaskReq) (*emptypb.Empty, error)
	// Get running tasks and status.
	GetRunningTasks(context.Context, *GetRunningTasksReq) (*GetRunningTasksResp, error)
	// Get stopped tasks and status.
	GetStoppedTasks(context.Context, *GetStoppedTasksReq) (*GetStoppedTasksResp, error)
	// Get task output.
	GetTaskOutput(context.Context, *GetTaskOutputReq) (*GetTaskOutputResp, error)
	// Get streaming task output.
	GetStreamingTaskOutput(*GetTaskOutputReq, JobsV1_GetStreamingTaskOutputServer) error
	mustEmbedUnimplementedJobsV1Server()
}

// UnimplementedJobsV1Server must be embedded to have forward compatible implementations.
type UnimplementedJobsV1Server struct {
}

func (UnimplementedJobsV1Server) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedJobsV1Server) GetJobs(context.Context, *GetJobsReq) (*GetJobsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedJobsV1Server) StartTask(context.Context, *StartTaskReq) (*StartTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTask not implemented")
}
func (UnimplementedJobsV1Server) StopTask(context.Context, *StopTaskReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTask not implemented")
}
func (UnimplementedJobsV1Server) GetRunningTasks(context.Context, *GetRunningTasksReq) (*GetRunningTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningTasks not implemented")
}
func (UnimplementedJobsV1Server) GetStoppedTasks(context.Context, *GetStoppedTasksReq) (*GetStoppedTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoppedTasks not implemented")
}
func (UnimplementedJobsV1Server) GetTaskOutput(context.Context, *GetTaskOutputReq) (*GetTaskOutputResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskOutput not implemented")
}
func (UnimplementedJobsV1Server) GetStreamingTaskOutput(*GetTaskOutputReq, JobsV1_GetStreamingTaskOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamingTaskOutput not implemented")
}
func (UnimplementedJobsV1Server) mustEmbedUnimplementedJobsV1Server() {}

// UnsafeJobsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsV1Server will
// result in compilation errors.
type UnsafeJobsV1Server interface {
	mustEmbedUnimplementedJobsV1Server()
}

func RegisterJobsV1Server(s grpc.ServiceRegistrar, srv JobsV1Server) {
	s.RegisterService(&JobsV1_ServiceDesc, srv)
}

func _JobsV1_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsV1Server).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.steve.JobsV1/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsV1Server).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsV1_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsV1Server).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.steve.JobsV1/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsV1Server).GetJobs(ctx, req.(*GetJobsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsV1_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsV1Server).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.steve.JobsV1/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsV1Server).StartTask(ctx, req.(*StartTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsV1_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsV1Server).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.steve.JobsV1/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsV1Server).StopTask(ctx, req.(*StopTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsV1_GetRunningTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsV1Server).GetRunningTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.steve.JobsV1/GetRunningTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsV1Server).GetRunningTasks(ctx, req.(*GetRunningTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsV1_GetStoppedTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoppedTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsV1Server).GetStoppedTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.steve.JobsV1/GetStoppedTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsV1Server).GetStoppedTasks(ctx, req.(*GetStoppedTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsV1_GetTaskOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskOutputReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsV1Server).GetTaskOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.steve.JobsV1/GetTaskOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsV1Server).GetTaskOutput(ctx, req.(*GetTaskOutputReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsV1_GetStreamingTaskOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskOutputReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsV1Server).GetStreamingTaskOutput(m, &jobsV1GetStreamingTaskOutputServer{stream})
}

type JobsV1_GetStreamingTaskOutputServer interface {
	Send(*GetTaskOutputResp) error
	grpc.ServerStream
}

type jobsV1GetStreamingTaskOutputServer struct {
	grpc.ServerStream
}

func (x *jobsV1GetStreamingTaskOutputServer) Send(m *GetTaskOutputResp) error {
	return x.ServerStream.SendMsg(m)
}

// JobsV1_ServiceDesc is the grpc.ServiceDesc for JobsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.steve.JobsV1",
	HandlerType: (*JobsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _JobsV1_HealthCheck_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _JobsV1_GetJobs_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _JobsV1_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _JobsV1_StopTask_Handler,
		},
		{
			MethodName: "GetRunningTasks",
			Handler:    _JobsV1_GetRunningTasks_Handler,
		},
		{
			MethodName: "GetStoppedTasks",
			Handler:    _JobsV1_GetStoppedTasks_Handler,
		},
		{
			MethodName: "GetTaskOutput",
			Handler:    _JobsV1_GetTaskOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamingTaskOutput",
			Handler:       _JobsV1_GetStreamingTaskOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobs.proto",
}
