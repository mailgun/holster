syntax = "proto3";

option go_package = "github.com/mailgun/holster/v4/steve";

option cc_generic_services = true;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package pb.steve;

service JobsV1 {
    // Reports the health of the service.
    rpc HealthCheck (google.protobuf.Empty) returns (HealthCheckResp) {}

    // Get available jobs.
    rpc GetJobs (GetJobsReq) returns (GetJobsResp) {}

    // Start task.
    rpc StartTask (StartTaskReq) returns (StartTaskResp) {}

    // Stop task.
    rpc StopTask (StopTaskReq) returns (google.protobuf.Empty) {}

    // Get running tasks and status.
    rpc GetRunningTasks (GetRunningTasksReq) returns (GetRunningTasksResp) {}

    // Get stopped tasks and status.
    rpc GetStoppedTasks (GetStoppedTasksReq) returns (GetStoppedTasksResp) {}

    // Get task output.
    rpc GetTaskOutput (GetTaskOutputReq) returns (GetTaskOutputResp) {}

    // Get streaming task output.
    rpc GetStreamingTaskOutput (GetTaskOutputReq) returns (stream GetTaskOutputResp) {}
}

message HealthCheckResp {
    string message = 1;
}

message PaginationArgs {
    int64 offset = 1;
    int64 limit = 2;
}

message JobHeader {
    string job_id = 1;
}

message GetJobsReq {
    // If pagination omitted, return first 20 matches.
    optional PaginationArgs pagination = 1;
    repeated string job_id = 2;
}

message GetJobsResp {
    repeated JobHeader jobs = 1;
}

message RunningTaskHeader {
    JobHeader job = 1;
    string task_id = 2;
    google.protobuf.Timestamp started = 3;
}

message StoppedTaskHeader {
    JobHeader job = 1;
    string task_id = 2;
    google.protobuf.Timestamp started = 3;
    google.protobuf.Timestamp stopped = 4;
    // Pass means task completed successfully.  Otherwise, error contains an explanation.
    bool pass = 5;
    string error = 6;
}

message TaskFilter {
    // Filter fields with repeated values are OR'd.
    // All non-empty fields are AND'd.
    repeated string job_ids = 1;
    repeated string task_ids = 2;
}

message StartTaskReq {
    string job_id = 1;
}

message StartTaskResp {
    string task_id = 1;
}

message StopTaskReq {
    string task_id = 1;
}

message GetRunningTasksReq {
    // If pagination omitted, return first 20 matches.
    optional PaginationArgs pagination = 1;
    optional TaskFilter filter = 2;
}

message GetRunningTasksResp {
    repeated RunningTaskHeader tasks = 1;
}

message GetStoppedTasksReq {
    // If pagination omitted, return first 20 matches.
    optional PaginationArgs pagination = 1;
    optional TaskFilter filter = 2;
}

message GetStoppedTasksResp {
    repeated StoppedTaskHeader tasks = 1;
}

message GetTaskOutputReq {
    // Pagination in terms of lines of text.
    // If pagination omitted, return last 100 lines.
    optional PaginationArgs pagination = 1;
    string task_id = 2;
}

message GetTaskOutputResp {
    repeated string output = 1;
}
